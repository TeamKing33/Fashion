{"version":3,"file":"static/js/379.a0492497.chunk.js","mappings":"iSACA,EAA0B,yBAA1B,EAA8D,0BAA9D,EAAiG,wBAAjG,EAAmI,yBAAnI,EAA2K,8BAA3K,EAAqN,2BAArN,EAAuP,sB,UCgFvP,MA3EA,WACE,IAAQA,GAAMC,EAAAA,EAAAA,MAAND,EAERE,GAAwCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7CI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAE9BI,EAAkB,SAACC,GACvB,OAAQA,GACN,KAAKT,EAAE,kBACLO,EAAgB,GAADG,QAAAC,EAAAA,EAAAA,GACVL,GAAY,CACf,CAAEM,KAAMZ,EAAE,kBAAmBa,IAAKb,EAAE,sDAEtC,MACF,KAAKA,EAAE,6BACLO,EAAgB,GAADG,QAAAC,EAAAA,EAAAA,GACVL,GAAY,CACf,CAAEM,KAAMZ,EAAE,6BAA8Ba,IAAKb,EAAE,0FAEjD,MACA,KAAKA,EAAE,mCACHO,EAAgB,GAADG,QAAAC,EAAAA,EAAAA,GACRL,GAAY,CACf,CAACM,KAAKZ,EAAE,mCAAmCa,IAAIb,EAAE,0IAErD,MACN,QACEO,EAAgB,GAADG,QAAAC,EAAAA,EAAAA,GACVL,GAAY,CACf,CAAEM,KAAMH,EAAQI,IAAKb,EAAE,sDAG/B,EAEA,OACEc,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAcC,UAC5BC,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAeC,SAAA,EAC7BC,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAaC,SAAA,EAC3BH,EAAAA,EAAAA,KAAA,OAAKK,IAAKC,EAAMC,IAAI,MACpBP,EAAAA,EAAAA,KAAA,UAAAG,SAASjB,EAAE,qBAEbkB,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAmBC,SAAA,EACnCC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,EACQH,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAgBC,UAClCH,EAAAA,EAAAA,KAAA,OAAKK,IAAKG,EAAMD,IAAI,QAGlBP,EAAAA,EAAAA,KAAA,QAAAG,SAAOjB,EAAE,mCAGdM,EAAaiB,KAAI,SAACC,EAAMC,GAAK,OAC5BP,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,EACEH,EAAAA,EAAAA,KAAA,SAAAG,SAAQjB,EAAE,eACVc,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAWC,SAAEO,EAAKZ,WAEpCM,EAAAA,EAAAA,MAAA,KAAAD,SAAA,EACEH,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAgBC,UAClCH,EAAAA,EAAAA,KAAA,OAAKK,IAAKG,EAAMD,IAAI,QAEjBP,EAAAA,EAAAA,KAAA,QAAAG,SAAOO,EAAKX,WATPY,EAWJ,QAIVP,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAcC,SAAA,EAC5BH,EAAAA,EAAAA,KAAA,UAAQY,QAAS,kBAAMlB,EAAgBR,EAAE,6BAA6B,EAACiB,SAAEjB,EAAE,gCAC3Ec,EAAAA,EAAAA,KAAA,UAAQY,QAAS,kBAAIlB,EAAgBR,EAAE,mCAAmC,EAACiB,SAAEjB,EAAE,sCAC/Ec,EAAAA,EAAAA,KAAA,UAAQY,QAAS,kBAAMlB,EAAgBR,EAAE,kBAAkB,EAACiB,SAAEjB,EAAE,2BAK1E,C","sources":["webpack://project1/./src/component/chatbot/chatbot.module.css?0db5","component/chatbot/chat.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"allchat\":\"chatbot_allchat__Xwnnv\",\"cardchat\":\"chatbot_cardchat__FUxhX\",\"header\":\"chatbot_header__TwTcL\",\"choices\":\"chatbot_choices__HxuRR\",\"conversation\":\"chatbot_conversation__Ap5Dr\",\"imagechat\":\"chatbot_imagechat__Abxyq\",\"user\":\"chatbot_user__aWQ9c\"};","import React, { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport img1 from './1.png';\r\nimport img2 from './2.png';\r\nimport style from './chatbot.module.css';\r\n\r\nfunction Chat() {\r\n  const { t } = useTranslation(); \r\n\r\n  const [conversation, setConversation] = useState([]);\r\n\r\n  const handleUserInput = (choice) => {\r\n    switch (choice) {\r\n      case t(\"How to contact\"): \r\n        setConversation([\r\n          ...conversation,\r\n          { user: t(\"How to contact\"), bot: t(\"You can contact through social media platforms\")},\r\n        ]);\r\n        break;\r\n      case t(\"Return and refund policy?\"): \r\n        setConversation([\r\n          ...conversation,\r\n          { user: t(\"Return and refund policy?\"), bot: t(\"The return must be made within 14 days, and the product must be in good condition.\")},\r\n        ]);\r\n        break;\r\n        case t(\"How can I purchase the product?\"):\r\n            setConversation([\r\n                ...conversation,\r\n                {user:t(\"How can I purchase the product?\"),bot:t(\"You can purchase the product by adding it to the cart or buying it individually. You will be contacted after the purchase process.\")}\r\n            ])\r\n            break;\r\n      default:\r\n        setConversation([\r\n          ...conversation,\r\n          { user: choice, bot: t('Sorry, I didn\\'t understand. You can try again.') },\r\n        ]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={style.allchat}>\r\n      <div className={style.cardchat}>\r\n        <div className={style.header}>\r\n          <img src={img1} alt=\"\" />\r\n          <strong>{t(\"Support Bot\")}</strong>\r\n        </div>\r\n        <div className={style.conversation}>\r\n        <p>\r\n                <div className={style.imagechat}>\r\n              <img src={img2} alt=\"\" />\r\n              {/* <strong>Support Bot</strong> */}\r\n                </div>\r\n                <span>{t(\"Hello! How can I help you?\")}</span>\r\n\r\n              </p>\r\n          {conversation.map((item, index) => (\r\n            <div key={index}>\r\n              <p>\r\n                <small>{t(\"Customer\")}</small>\r\n                <div className={style.user}>{item.user}</div> \r\n              </p>\r\n              <p>\r\n                <div className={style.imagechat}>\r\n              <img src={img2} alt=\"\" />\r\n                </div>\r\n                 <span>{item.bot}</span>\r\n              </p>\r\n            </div>\r\n          ))}\r\n           \r\n        </div>\r\n        <div className={style.choices}>\r\n          <button onClick={() => handleUserInput(t(\"Return and refund policy?\"))}>{t(\"Return and refund policy?\")}</button>\r\n          <button onClick={()=>handleUserInput(t(\"How can I purchase the product?\"))}>{t(\"How can I purchase the product?\")}</button>\r\n          <button onClick={() => handleUserInput(t(\"How to contact\"))}>{t(\"How to contact\")}</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n"],"names":["t","useTranslation","_useState","useState","_useState2","_slicedToArray","conversation","setConversation","handleUserInput","choice","concat","_toConsumableArray","user","bot","_jsx","className","style","children","_jsxs","src","img1","alt","img2","map","item","index","onClick"],"sourceRoot":""}